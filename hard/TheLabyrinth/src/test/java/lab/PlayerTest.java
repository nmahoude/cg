package lab;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.List;

import org.junit.Test;

import utils.Explore;
import utils.P;
import utils.Path;
import utils.PathItem;

public class PlayerTest {

  @Test
  public void basicAstar() throws Exception {
    Player player = new Player();
    
    player.width = 30;
    player.height = 15;
    player.cells = new char[player.width][player.height];
    initCells(player,    
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "???#####??????????????????????",
        "???#####??????????????????????",
        "???##T..??????????????????????",
        "???#####??????????????????????",
        "???#####??????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????",
        "??????????????????????????????"
        );
    player.kirk = new P(5,6);
    
    Explore e = new Explore(player.width, player.height, player.cells);
    P target = e.findClosedReachableCell(player.kirk);
    if (target != null) {
      Path astar = new Path(player.width, player.height, player.cells, player.kirk, target);
      List<PathItem> path = astar.find();
      if (!path.isEmpty()) {
         PathItem first = path.get(0);
         P pos = first.getPosition();
      } else {
        System.err.println("Path is empty");
      }
    } else {
      System.err.println("Plus de '?' Ã  trouver");
    }
  }
  
  @Test
  public void exploringEmptyBoard() throws Exception {
    Player player = new Player();
    
    player.width = 30;
    player.height = 15;
    player.cells = new char[player.width][player.height];
    initCells(player,    
        "##############################",
        "#T...........................#",
        "##...........................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#...........................C#",
        "##############################"
        );
    player.kirk = new P(2,6);
    
    Explore e = new Explore(player.width, player.height, player.cells);
    long t1 = System.currentTimeMillis();
    P target = e.findClosedReachableCell(player.kirk);
    long t2 = System.currentTimeMillis();
    
    assertThat((t2-t1) > 1000, is(false));
  }
  
  @Test
  public void EmptyBoard() throws Exception {
    Player player = new Player();
    
    player.width = 30;
    player.height = 15;
    player.cells = new char[player.width][player.height];
    initCells(player,    
        "##############################",
        "#T...........................#",
        "##...........................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#............................#",
        "#...........................C#",
        "##############################"
        );
    player.kirk = new P(2,6);
    
    Path astar = new Path(player.width, player.height, player.cells, player.kirk, P.get(28,13));
    List<PathItem> path = astar.find();
    assertThat(path.isEmpty(), is(false));
  }
  
  @Test
  public void cantfindWayBack() throws Exception {
    Player player = new Player();
    
    player.width = 30;
    player.height = 15;
    player.cells = new char[player.width][player.height];
    initCells(player,    
        "??????????????????############",
        "??????????????????..T........#",
        "??????????????????##########.#",
        "??????????????????.........#.#",
        "??????????????????????????.#.#",
        "??????????????????????????.#.#",
        "??????????????????????????##.#",
        "??????????????????????????##.#",
        "??????????????????????????##.#",
        "??????????????????????????.#.#",
        "??????????????????????????.#.#",
        "??????????????????????????.#.#",
        "??????????????????????????##.#",
        "??????????????????????????.#.#",
        "??????????????????????????####"
        );
    player.kirk = new P(28,12);
    
    P target = P.get(17,1);
    Path astar = new Path(player.width, player.height, player.cells, player.kirk, target);
    List<PathItem> path = astar.find();
    
    assertThat(path.isEmpty(), is(false));
  }
  
  private void initCells(Player player, String...rows) {
    for (int y=0;y<player.height;y++) {
      for (int x=0;x<player.width;x++) {
        player.cells[x][y] = rows[y].charAt(x);
      }
    }
  }
}
