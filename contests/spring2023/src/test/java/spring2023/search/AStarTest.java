package spring2023.search;

import org.junit.jupiter.api.Test;

import spring2023.State;
import spring2023.StateTest;

public class AStarTest {

  
  
  @Test
  void test() throws Exception {
    State state = StateTest.buildFromInput("""
        *** INIT ***
^40
^ 0 0 -1 6 2 -1 5 13 
^ 0 0 -1 4 12 -1 7 3 0 0 6 8 -1 4 -1 0 0 0 5 -1 1 7 9 -1 1 0 2 -1 10 12 1 -1 1 0 13 0 -1 3 -1 11 0 0 14 -1 8 2 0 -1 0 0 3 1 -1 15 -1 9 0 0 -1 -1 -1 -1 2 6 0 0 -1 3 7 -1 -1 -1 0 0 -1 -1 -1 16 12 4 
^ 0 0 17 13 5 -1 -1 -1 0 0 4 10 16 18 -1 1 0 0 19 -1 0 5 11 17 0 0 22 24 -1 6 -1 -1 0 0 7 -1 -1 23 25 -1 1 0 10 -1 -1 26 18 12 1 0 27 19 13 11 -1 -1 0 0 12 16 26 28 -1 -1 0 0 29 -1 -1 13 17 27 0 0 30 32 22 -1 29 39 
^ 0 0 -1 28 38 31 33 23 0 0 32 34 24 14 -1 20 0 0 15 -1 21 33 35 25 0 0 34 -1 -1 -1 14 22 0 0 -1 15 23 35 -1 -1 1 0 16 -1 -1 36 28 18 1 0 37 29 19 17 -1 -1 0 0 18 26 36 38 21 -1 0 0 39 20 -1 19 27 37 2 0 -1 -1 32 20 39 -1 
^ 2 0 21 38 -1 -1 -1 33 0 0 -1 -1 34 22 20 30 0 0 23 21 31 -1 -1 35 1 0 -1 -1 -1 24 22 32 1 0 25 23 33 -1 -1 -1 0 0 26 -1 -1 -1 38 28 0 0 -1 39 29 27 -1 -1 0 0 28 36 -1 -1 31 21 0 0 -1 30 20 29 37 -1 
^1
^ 38 39 
*** OPTIONAL ***
^1
*** TURN
^ 0 0 

^ 0 
^ 0 0 0 10 10 0 0 0 0 0 0 0 0 0 0 26 26 0 0 0 
^ 0 0 0 0 0 15 15 0 0 49 49 0 0 20 20 0 0 1000000 10000 
*** END
        """ );
    
    AStar astar = new AStar();
    astar.search(state, state.cells[38], state.cells[16]);
  }

  
  @Test
  void testWithAnts() throws Exception {
    State state = StateTest.buildFromInput("""
*** INIT ***
^40
^ 0 0 -1 6 2 -1 5 13 
^ 0 0 -1 4 12 -1 7 3 0 0 6 8 -1 4 -1 0 0 0 5 -1 1 7 9 -1 1 0 2 -1 10 12 1 -1 1 0 13 0 -1 3 -1 11 0 0 14 -1 8 2 0 -1 0 0 3 1 -1 15 -1 9 0 0 -1 -1 -1 -1 2 6 0 0 -1 3 7 -1 -1 -1 0 0 -1 -1 -1 16 12 4 
^ 0 0 17 13 5 -1 -1 -1 0 0 4 10 16 18 -1 1 0 0 19 -1 0 5 11 17 0 0 22 24 -1 6 -1 -1 0 0 7 -1 -1 23 25 -1 1 0 10 -1 -1 26 18 12 1 0 27 19 13 11 -1 -1 0 0 12 16 26 28 -1 -1 0 0 29 -1 -1 13 17 27 0 0 30 32 22 -1 29 39 
^ 0 0 -1 28 38 31 33 23 0 0 32 34 24 14 -1 20 0 0 15 -1 21 33 35 25 0 0 34 -1 -1 -1 14 22 0 0 -1 15 23 35 -1 -1 1 0 16 -1 -1 36 28 18 1 0 37 29 19 17 -1 -1 0 0 18 26 36 38 21 -1 0 0 39 20 -1 19 27 37 2 0 -1 -1 32 20 39 -1 
^ 2 0 21 38 -1 -1 -1 33 0 0 -1 -1 34 22 20 30 0 0 23 21 31 -1 -1 35 1 0 -1 -1 -1 24 22 32 1 0 25 23 33 -1 -1 -1 0 0 26 -1 -1 -1 38 28 0 0 -1 39 29 27 -1 -1 0 0 28 36 -1 -1 31 21 0 0 -1 30 20 29 37 -1 
^1
^ 38 39 
*** OPTIONAL ***
^3
*** TURN
^ 0 
^ 0 0 0 10 10 0 0 0 0 0 0 0 0 0 0 26 26 0 1000 0 
^ 0 0 0 0 0 300014 5013 200000 2000 49 100047 0 200000 20 20 100000 0 200000 4000 *** END
Best targets : 
        """ );
    
    AStar astar = new AStar();
    astar.search(state, state.cells[38], state.cells[23]);
  }
  
  @Test
  void withAntsCost() throws Exception {

    State state = StateTest.buildFromInput("""
    *** INIT ***
    ^31
    ^ 2 0 -1 -1 1 -1 -1 2 
    ^ 0 0 -1 9 11 13 -1 0 0 0 14 -1 0 -1 10 12 1 0 -1 15 5 -1 14 22 1 0 -1 13 21 -1 16 6 2 0 15 17 7 -1 -1 3 2 0 -1 -1 4 16 18 8 2 0 17 -1 -1 9 -1 5 2 0 10 -1 6 18 -1 -1 0 0 7 -1 -1 11 1 -1 0 0 12 2 -1 8 -1 -1 
    ^ 0 0 9 -1 -1 19 13 1 0 0 20 14 2 10 -1 -1 0 0 1 11 19 21 4 -1 0 0 22 3 -1 2 12 20 1 0 25 27 17 5 3 -1 1 0 6 4 -1 26 28 18 0 0 27 -1 -1 7 5 15 0 0 8 6 16 28 -1 -1 0 0 11 -1 -1 -1 21 13 0 0 -1 22 14 12 -1 -1 
    ^ 0 0 13 19 -1 29 -1 4 0 0 30 -1 3 14 20 -1 0 0 -1 -1 25 -1 30 -1 0 0 -1 29 -1 -1 -1 26 0 0 -1 -1 27 15 -1 23 0 0 16 -1 24 -1 -1 28 0 0 -1 -1 -1 17 15 25 0 0 18 16 26 -1 -1 -1 1 0 21 -1 -1 -1 24 -1 1 0 -1 23 -1 22 -1 -1 
    ^ 
    ^1
    ^ 12 11 
    *** OPTIONAL ***
    ^1
    *** TURN
    ^ 0 0 
    ^ 49 
    ^ 0 0 21 21 42 42 42 42 0 0 10000 1000000 0 0 15 15 0 0 0 0 
    ^ 0 0 0 0 0 0 0 0 33 33 *** END
        """ );
    
    AStar astar = new AStar();
    
  }
  
  
}
