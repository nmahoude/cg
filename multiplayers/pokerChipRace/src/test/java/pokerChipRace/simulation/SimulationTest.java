package pokerChipRace.simulation;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;

import pokerChipRace.GameState;
import pokerChipRace.entities.Entity;
import pokerChipRace.simulate.Simulation;

public class SimulationTest {
  GameState state;
  Simulation simulation;
  
  @Before
  public void setup() {
    state = new GameState();
    simulation = new Simulation();
    simulation.setGameState(state);
  }
  
  @Test
  public void onlyWaits() throws Exception {
    readEntity(0,0,724.6743774414062, 376.09814453125, 0.0, 0.0,22.0);
    readEntity(1,0,291.6842041015625, 34.03342819213867, 0.0, 0.0,22.0);
    readEntity(2,0,430.6830139160156, 203.0612030029297, 0.0, 0.0,22.0);
    readEntity(3,1,680.3815307617188, 107.48697662353516, 0.0, 0.0,22.0);
    readEntity(4,1,755.4916381835938, 54.16474151611328, 0.0, 0.0,22.0);
    readEntity(5,1,516.9147338867188, 38.160484313964844, 0.0, 0.0,22.0);
    readEntity(6,-1,520.43212890625, 349.64288330078125, -3.9320950508117676, 5.080718040466309,19.408491134643555);
    readEntity(7,-1,190.05186462402344, 359.1792297363281, 3.7283389568328857, 4.852934837341309,15.908758163452148);
    readEntity(8,-1,253.4017333984375, 259.5242614746094, -1.020956039428711, 0.7239260077476501,11.26508903503418);
    readEntity(9,-1,291.30126953125, 200.0384063720703, -0.3791249990463257, 0.27903100848197937,13.772111892700195);
    readEntity(10,-1,511.5721130371094, 411.3345031738281, -5.510680198669434, 0.07664299756288528,11.779850959777832);
    readEntity(11,-1,245.54330444335938, 320.5696716308594, -3.085602045059204, 6.795526027679443,10.763887405395508);
    readEntity(12,-1,431.9039001464844, 478.63494873046875, 1.8313299417495728, 0.26665300130844116,18.204633712768555);
    readEntity(13,-1,590.2728881835938, 134.08236694335938, -0.0, 0.0,24.026538848876953);
    readEntity(14,-1,217.47325134277344, 215.81057739257812, -3.724220037460327, 8.327756881713867,21.360769271850586);
    readEntity(15,-1,143.4920196533203, 140.57420349121094, 1.8888100385665894, 4.532544136047363,21.254865646362305);
    readEntity(16,-1,638.1077880859375, 486.717529296875, 6.155233860015869, 3.239159107208252,18.16677474975586);
    readEntity(17,-1,324.4772033691406, 282.5975341796875, 8.173571586608887, 4.373716831207275,20.290061950683594);
    readEntity(18,-1,163.6325225830078, 444.612548828125, -0.0, 0.0,22.375057220458984);
    readEntity(19,-1,473.51214599609375, 286.6481018066406, -6.552276134490967, 1.2054059505462646,19.44071388244629);
    readEntity(20,-1,619.7417602539062, 347.20703125, 0.5038049817085266, 0.7231760025024414,13.29581356048584);
    readEntity(21,-1,581.9083251953125, 232.45050048828125, 0.009050999768078327, 0.004116999916732311,19.806461334228516);
    readEntity(22,-1,137.456298828125, 261.2780456542969, 0.0, 0.0,23.370384216308594);
    readEntity(23,-1,142.22511291503906, 327.72918701171875, -0.036733001470565796, 0.19487999379634857,21.993730545043945);
    readEntity(24,-1,233.3192901611328, 460.0710754394531, 0.0, 0.0,23.839866638183594);
    readEntity(25,-1,541.2835083007812, 199.6179962158203, -2.8856029510498047, 2.2919890880584717,11.058307647705078);
    readEntity(26,-1,385.00250244140625, 314.97906494140625, 0.2372490018606186, 1.6791939735412598,21.719343185424805);
    readEntity(27,-1,60.0308952331543, 214.78842163085938, -4.32896089553833, 4.047883987426758,10.206849098205566);
    readEntity(28,-1,208.4039306640625, 70.7476806640625, -1.4596879482269287, 2.3263819217681885,16.901697158813477);
    readEntity(29,-1,430.9140319824219, 95.58061981201172, -0.0, 0.0,24.834226608276367);
    readEntity(30,-1,750.0421752929688, 502.4300231933594, 9.40437126159668, 3.236840009689331,12.201292991638184);
    readEntity(31,-1,315.95660400390625, 143.6000213623047, -5.550239086151123, 1.1023550033569336,14.300597190856934);
    readEntity(32,-1,60.17445755004883, 448.6737060546875, 3.433505058288574, 0.17326100170612335,17.429105758666992);
    readEntity(33,-1,266.4576416015625, 387.626220703125, -0.4360179901123047, 0.705407977104187,19.475522994995117);
    readEntity(34,-1,98.0516128540039, 195.06573486328125, -3.402240037918091, 2.2276580333709717,20.144573211669922);
    readEntity(35,-1,728.819580078125, 266.670166015625, -0.0, 0.0,22.64336585998535);
    readEntity(36,-1,371.4612731933594, 116.20501708984375, 4.214001178741455, 4.972672939300537,10.165745735168457);
    applyOrder(0, 0, "WAIT");
    applyOrder(0, 1, "WAIT");
    applyOrder(0, 2, "WAIT");
    applyOrder(1, 3, "WAIT");
    applyOrder(1, 4, "WAIT");
    applyOrder(1, 5, "WAIT");
    simulation.playTurn();
    
    checkEntity(0,0,724.6743774414062, 376.09814453125, 0.0, 0.0,22.0);
    checkEntity(1,0,291.6842041015625, 34.03342819213867, 0.0, 0.0,22.0);
    checkEntity(2,0,430.6830139160156, 203.0612030029297, 0.0, 0.0,22.0);
    checkEntity(3,1,680.3815307617188, 107.48697662353516, 0.0, 0.0,22.0);
    checkEntity(4,1,755.4916381835938, 54.16474151611328, 0.0, 0.0,22.0);
    checkEntity(5,1,516.9147338867188, 38.160484313964844, 0.0, 0.0,22.0);
    checkEntity(6,-1,516.5000610351562, 354.7236022949219, -3.9320950508117676, 5.080718040466309,19.408491134643555);
    checkEntity(7,-1,193.7801971435547, 364.03216552734375, 3.7283389568328857, 4.852934837341309,15.908758163452148);
    checkEntity(8,-1,252.3807830810547, 260.2481689453125, -1.020956039428711, 0.7239260077476501,11.26508903503418);
    checkEntity(9,-1,290.9221496582031, 200.31744384765625, -0.3791249990463257, 0.27903100848197937,13.772111892700195);
    checkEntity(10,-1,506.0614318847656, 411.4111328125, -5.510680198669434, 0.07664299756288528,11.779850959777832);
    checkEntity(11,-1,242.4576873779297, 327.36517333984375, -3.085602045059204, 6.795526027679443,10.763887405395508);
    checkEntity(12,-1,433.7352294921875, 478.901611328125, 1.8313299417495728, 0.26665300130844116,18.204633712768555);
    checkEntity(13,-1,590.2728881835938, 134.08236694335938, -0.0, 0.0,24.026538848876953);
    checkEntity(14,-1,213.74903869628906, 224.13833618164062, -3.724220037460327, 8.327756881713867,21.360769271850586);
    checkEntity(15,-1,145.38082885742188, 145.1067352294922, 1.8888100385665894, 4.532544136047363,21.254865646362305);
    checkEntity(16,-1,644.2630004882812, 489.9566955566406, 6.155233860015869, 3.239159107208252,18.16677474975586);
    checkEntity(17,-1,332.6507873535156, 286.97125244140625, 8.173571586608887, 4.373716831207275,20.290061950683594);
    checkEntity(18,-1,163.6325225830078, 444.612548828125, -0.0, 0.0,22.375057220458984);
    checkEntity(19,-1,466.9598693847656, 287.8534851074219, -6.552276134490967, 1.2054059505462646,19.44071388244629);
    checkEntity(20,-1,620.2455444335938, 347.93023681640625, 0.5038049817085266, 0.7231760025024414,13.29581356048584);
    checkEntity(21,-1,581.9173583984375, 232.45462036132812, 0.009050999768078327, 0.004116999916732311,19.806461334228516);
    checkEntity(22,-1,137.456298828125, 261.2780456542969, 0.0, 0.0,23.370384216308594);
    checkEntity(23,-1,142.18838500976562, 327.924072265625, -0.036733001470565796, 0.19487999379634857,21.993730545043945);
    checkEntity(24,-1,233.3192901611328, 460.0710754394531, 0.0, 0.0,23.839866638183594);
    checkEntity(25,-1,538.39794921875, 201.90997314453125, -2.8856029510498047, 2.2919890880584717,11.058307647705078);
    checkEntity(26,-1,385.23974609375, 316.65826416015625, 0.2372490018606186, 1.6791939735412598,21.719343185424805);
    checkEntity(27,-1,55.701934814453125, 218.8363037109375, -4.32896089553833, 4.047883987426758,10.206849098205566);
    checkEntity(28,-1,206.94424438476562, 73.07405853271484, -1.4596879482269287, 2.3263819217681885,16.901697158813477);
    checkEntity(29,-1,430.9140319824219, 95.58061981201172, -0.0, 0.0,24.834226608276367);
    checkEntity(30,-1,759.446533203125, 499.9305419921875, 9.40437126159668, -3.236840009689331,12.201292991638184);
    checkEntity(31,-1,310.4063720703125, 144.70237731933594, -5.550239086151123, 1.1023550033569336,14.300597190856934);
    checkEntity(32,-1,63.60796356201172, 448.84698486328125, 3.433505058288574, 0.17326100170612335,17.429105758666992);
    checkEntity(33,-1,266.0216369628906, 388.3316345214844, -0.4360179901123047, 0.705407977104187,19.475522994995117);
    checkEntity(34,-1,94.64937591552734, 197.29339599609375, -3.402240037918091, 2.2276580333709717,20.144573211669922);
    checkEntity(35,-1,728.819580078125, 266.670166015625, -0.0, 0.0,22.64336585998535);
    checkEntity(36,-1,375.67529296875, 121.17768859863281, 4.214001178741455, 4.972672939300537,10.165745735168457);
  }

  @Test
  public void emission() throws Exception {
    readEntity(0,0,734.9815f, 382.14136f, 0.0f, 0.0f,10.0f);
    readEntity(1,1,312.7988f, 74.2455f, 6.138302f, 12.899725f,9.660918f);
    readEntity(2,-1,311.72104f, 310.83975f, -0.0f, 0.0f,18.10879f);
    readEntity(3,-1,63.70496f, 313.54193f, 85.93622f, -180.59615f,2.581989f);
    
    applyOrder(0, 0, "WAIT");
    applyOrder(1, 1, 400.0,257.5);
    simulation.playTurn();
    
    checkEntity(4,-1,230.06235f, 104.6152f, -79.79792f, 167.69641f,2.494438f);
    checkEntity(0,0,734.9815f, 382.14136f, 0.0f, 0.0f,10.0f);
    checkEntity(1,1,325.0754f, 100.044945f, 12.276604f, 25.79945f,9.333333f);
    checkEntity(2,-1,311.72104f, 310.83975f, -0.0f, 0.0f,18.10879f);
    checkEntity(3,-1,149.64119f, 132.94579f, 85.93622f, -180.59615f,2.581989f);
  }
  
  
  @Test
  public void ejectWithBounce() throws Exception {
    readEntity(0,0,734.9815f, 382.14136f, 0.0f, 0.0f,10.0f);
    readEntity(1,1,288.2456f, 22.646599f, 0.0f, 0.0f,10.0f);
    readEntity(2,-1,311.72104f, 310.83975f, -0.0f, 0.0f,18.10879f);
    
    applyOrder(0, 0, "WAIT");
    applyOrder(1, 1, 400.0,257.5);
    simulation.playTurn();

    checkEntity(0,0,734.9815f, 382.14136f, 0.0f, 0.0f,10.0f);
    checkEntity(1,1,294.3839f, 35.54632f, 6.138302f, 12.899725f,9.660918f);
    checkEntity(2,-1,311.72104f, 310.83975f, -0.0f, 0.0f,18.10879f);
    checkEntity(3,-1,199.26768f, 169.50566f, -85.93622f, 180.59615f,2.581989f);
  }
  
  @Test
  public void absorbtion() throws Exception {
    readEntity(0,0,734.9815f, 382.14136f, 0.0f, 0.0f,10.0f);
    readEntity(1,1,460.11804f, 383.8389f, -12.276604f, -25.79945f,7.588346f);
    readEntity(2,-1,318.45624f, 325.67566f, 1.696749f, 3.565742f,18.257833f);
    readEntity(3,-1,708.3747f, 308.4336f, 85.93622f, 180.59615f,2.581989f);
    readEntity(4,-1,179.85231f, 216.93666f, 79.79792f, 167.69641f,2.494438f);
    readEntity(5,-1,328.91528f, 177.78793f, -73.659615f, 154.79669f,2.409856f);
    readEntity(6,-1,-100, -100, 0, 0,-1);
    readEntity(7,-1,271.29727f, 267.53476f, 98.21283f, 206.39558f,2.249199f);
    readEntity(8,-1,163.12462f, 384.7583f, -92.074524f, 193.49586f,2.172933f);
    readEntity(9,-1,568.4867f, 471.59387f, -85.93622f, -180.59615f,2.099253f);
    readEntity(10,-1,646.65625f, 250.09239f, 79.79792f, -167.69641f,2.028071f);

    applyOrder(0, 0, "WAIT");
    applyOrder(1, 1, "WAIT");
    simulation.playTurn();

    
    checkEntity(0,0,738.6896f, 388.82187f, 5.371014f, 11.287259f,10.327956f);
    checkEntity(1,1,447.84143f, 358.03946f, -12.276604f, -25.79945f,7.588346f);
    checkEntity(2,-1,320.89084f, 331.4044f, 3.139581f, 6.597872f,18.395853f);
    checkEntity(4,-1,259.65024f, 384.6331f, 79.79792f, 167.69641f,2.494438f);
    checkEntity(5,-1,255.25566f, 332.58463f, -73.659615f, 154.79669f,2.409856f);
    checkEntity(8,-1,71.0501f, 447.39996f, -92.074524f, -193.49586f,2.172933f);
    checkEntity(9,-1,482.55048f, 290.99774f, -85.93622f, -180.59615f,2.099253f);
    checkEntity(10,-1,726.45416f, 82.39598f, 79.79792f, -167.69641f,2.028071f);
  }
  
  @Test
  public void doubleAbsorbation() throws Exception {
    /*7*/readEntity(0,0,440.60834f, 294.19122f, -31.799444f, -28.732042f,18.033712f);
    /*8*/readEntity(1,0,421.7829f, 219.12282f, -1.207104f, 11.47289f,40.13934f);
    /*13*/readEntity(2,-1,388.21835f, 264.772f, 0.233053f, 3.517607f,14.197735f);

    applyOrder(0, 0, "WAIT");
    applyOrder(0, 1, "WAIT");
    simulation.playTurn();

    checkEntity(1,0,415.75705f, 239.4529f, -5.724866f, 4.607069f,46.23805f);
    assertThat(state.getInitialChip(0).isDead(), is(true));
    assertThat(state.getInitialChip(2).isDead(), is(true));
  }
  
  @Test
  public void backupAndRestore() throws Exception {
    /*7*/readEntity(0,0,440.60834f, 294.19122f, -31.799444f, -28.732042f,18.033712f);
    /*8*/readEntity(1,0,421.7829f, 219.12282f, -1.207104f, 11.47289f,40.13934f);
    /*13*/readEntity(2,-1,388.21835f, 264.772f, 0.233053f, 3.517607f,14.197735f);

    state.backup();
    
    applyOrder(0, 0, "WAIT");
    applyOrder(0, 1, "WAIT");
    simulation.playTurn();

    checkEntity(1,0,415.75705f, 239.4529f, -5.724866f, 4.607069f,46.23805f);
    assertThat(state.getInitialChip(0).isDead(), is(true));
    assertThat(state.getInitialChip(2).isDead(), is(true));
    
    state.restore();
    /*7*/checkEntity(0,0,440.60834f, 294.19122f, -31.799444f, -28.732042f,18.033712f);
    /*8*/checkEntity(1,0,421.7829f, 219.12282f, -1.207104f, 11.47289f,40.13934f);
    /*13*/checkEntity(2,-1,388.21835f, 264.772f, 0.233053f, 3.517607f,14.197735f);
    
  }
  
  private void applyOrder(int owner, int id, double targetx, double targety) {
    for (int i=0;i<state.entityFE;i++ ) {
      Entity entity = state.getInitialChip(i);
      if (entity.owner == owner && entity.id == id) {
        entity.targetx = targetx;
        entity.targety = targety;
      }
    }
  }

  private void applyOrder(int owner, int id, String wait) {
    for (int i=0;i<state.entityFE;i++ ) {
      Entity entity = state.getInitialChip(i);
      if (entity.owner == owner && entity.id == id) {
        entity.targetx = -100;
        entity.targety = -100;
      }
    }
  }

  private void readEntity(int id, int owner, double x, double y, double vx, double vy, double radius) {
    Entity entity = state.getInitialChip(id);
    entity.update(owner, x,y, radius, vx, vy);
  }

  private void checkEntity(int id, int owner, double x, double y, double vx, double vy, double radius) {
    Entity entity = state.getInitialChip(id);
    assertThat(entity.owner, is(owner));

    assertEquals(x , entity.x, 0.001);
    assertEquals(y , entity.y, 0.001);
    assertEquals(vx , entity.vx, 0.001);
    assertEquals(vy , entity.vy, 0.001);
    
    assertEquals(radius , entity.radius, 0.001);
  }
}
