package pokerChipRace.simulation;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.junit.Before;
import org.junit.Test;

import cgcollections.arrays.FastArray;
import pokerChipRace.GameState;
import pokerChipRace.entities.Entity;
import pokerChipRace.simulate.Simulation;

public class SimulationTest {
  GameState state;
  Simulation simulation;
  
  @Before
  public void setup() {
    state = new GameState();
    state.allChips = new FastArray<>(Entity.class, 1000);
    simulation = new Simulation(state);
  }
  
  @Test
  public void fullGame1() throws Exception {int entityCount = 5;
  readEntity(0,0,21.0,359.68,27.89);
  readEntity(1,1,21.0,729.83,206.25);
  readEntity(2,-1,15.41,203.07,224.75);
  readEntity(3,-1,12.79,780.21,78.38);
  readEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,729.83,206.25);
  checkEntity(2,-1,15.41,202.39,224.92);
  checkEntity(3,-1,12.79,782.28,79.32);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,729.83,206.25);
  checkEntity(2,-1,15.41,201.72,225.09);
  checkEntity(3,-1,12.79,784.35,80.26);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,729.83,206.25);
  checkEntity(2,-1,15.41,201.04,225.26);
  checkEntity(3,-1,12.79,786.42,81.2);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,711.13,206.1);
  checkEntity(2,-1,15.41,200.37,225.42);
  checkEntity(3,-1,12.79,785.93,82.15);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(5,-1,-1.0,738.45,187.47);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,684.78,206.1);
  checkEntity(2,-1,15.41,199.69,225.59);
  checkEntity(3,-1,12.79,783.87,83.09);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,658.43,206.1);
  checkEntity(2,-1,15.41,199.02,225.76);
  checkEntity(3,-1,12.79,781.8,84.03);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,21.0,632.08,206.1);
  checkEntity(2,-1,15.41,198.34,225.93);
  checkEntity(3,-1,12.79,779.73,84.97);
  checkEntity(4,-1,24.78,375.41,155.1);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,20.29,591.78,209.19);
  checkEntity(2,-1,15.41,197.67,226.09);
  checkEntity(3,-1,12.79,777.66,85.91);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(6,-1,5.42,773.64,159.63);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,20.29,551.49,212.27);
  checkEntity(2,-1,15.41,196.99,226.26);
  checkEntity(3,-1,12.79,775.59,86.86);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(6,-1,5.42,604.72,116.38);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.0,359.68,27.89);
  checkEntity(1,1,20.29,511.19,215.36);
  checkEntity(2,-1,15.41,196.32,226.43);
  checkEntity(3,-1,12.79,773.52,87.8);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(6,-1,5.42,435.81,73.13);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,353.88,28.02);
  checkEntity(1,1,20.29,470.89,218.45);
  checkEntity(2,-1,15.41,195.64,226.6);
  checkEntity(3,-1,12.79,771.45,88.74);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(6,-1,-1.0,361.94,54.22);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.69,343.33,25.32);
  checkEntity(1,1,19.6,418.08,228.44);
  checkEntity(2,-1,15.41,194.97,226.77);
  checkEntity(3,-1,12.79,769.38,89.68);
  checkEntity(4,-1,24.78,375.41,155.1);
  checkEntity(7,-1,5.24,618.35,118.12);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,460.75214500000004,301.769596);
  simulation.move();
  checkEntity(0,0,21.69,332.77,22.61);
  checkEntity(1,1,18.94,372.45,250.76);
  checkEntity(2,-1,15.41,194.29,226.93);
  checkEntity(3,-1,12.79,767.31,90.62);
  checkEntity(4,-1,25.29,370.69,151.04);
  checkEntity(7,-1,5.24,753.24,24.72);
  checkEntity(8,-1,-1.0,380.95,184.42);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,322.21,23.47);
  checkEntity(1,1,18.94,326.83,273.09);
  checkEntity(2,-1,15.41,193.62,227.1);
  checkEntity(3,-1,12.79,765.24,91.57);
  checkEntity(4,-1,25.29,364.55,144.52);
  checkEntity(7,-1,5.24,701.4,79.16);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,311.66,26.17);
  checkEntity(1,1,18.94,281.2,295.42);
  checkEntity(2,-1,15.41,192.95,227.27);
  checkEntity(3,-1,12.79,763.17,92.51);
  checkEntity(4,-1,25.29,358.41,137.99);
  checkEntity(7,-1,5.24,566.51,172.56);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,301.1,28.87);
  checkEntity(1,1,18.94,235.57,317.75);
  checkEntity(2,-1,15.41,192.27,227.44);
  checkEntity(3,-1,12.79,761.1,93.45);
  checkEntity(4,-1,25.29,352.27,131.47);
  checkEntity(7,-1,5.24,431.63,265.97);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.69,290.54,31.58);
  checkEntity(1,1,18.29,203.36,335.16);
  checkEntity(2,-1,15.41,191.6,227.6);
  checkEntity(3,-1,12.79,759.04,94.39);
  checkEntity(4,-1,25.29,346.13,124.95);
  checkEntity(7,-1,5.24,296.74,359.37);
  checkEntity(9,-1,4.89,20.21,413.5);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,279.98,34.28);
  checkEntity(1,1,18.29,171.15,352.58);
  checkEntity(2,-1,15.41,190.92,227.77);
  checkEntity(3,-1,12.79,756.97,95.33);
  checkEntity(4,-1,25.29,339.99,118.43);
  checkEntity(7,-1,5.24,161.86,452.77);
  checkEntity(9,-1,4.89,253.62,504.64);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,269.43,36.98);
  checkEntity(1,1,18.29,138.94,369.99);
  checkEntity(2,-1,15.41,190.25,227.94);
  checkEntity(3,-1,12.79,754.9,96.28);
  checkEntity(4,-1,25.29,333.85,111.91);
  checkEntity(7,-1,5.24,26.97,473.35);
  checkEntity(9,-1,4.89,487.04,424.44);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,258.87,39.69);
  checkEntity(1,1,19.03,107.61,386.84);
  checkEntity(2,-1,15.41,189.57,228.11);
  checkEntity(3,-1,12.79,752.83,97.22);
  checkEntity(4,-1,25.29,327.71,105.39);
  checkEntity(9,-1,4.89,720.45,333.3);
  checkEntity(7,-1,-1.0,93.25,397.36);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.69,248.31,42.39);
  checkEntity(1,1,18.38,101.12,390.08);
  checkEntity(2,-1,15.41,188.9,228.27);
  checkEntity(3,-1,12.79,750.76,98.16);
  checkEntity(4,-1,25.29,321.57,98.87);
  checkEntity(9,-1,4.89,636.35,242.16);
  checkEntity(10,-1,4.91,116.99,482.21);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,237.75,45.09);
  checkEntity(1,1,18.38,94.64,393.31);
  checkEntity(2,-1,15.41,188.22,228.44);
  checkEntity(3,-1,12.79,748.69,99.1);
  checkEntity(4,-1,25.29,315.42,92.35);
  checkEntity(9,-1,4.89,402.94,151.02);
  checkEntity(10,-1,4.91,319.45,448.04);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,227.2,47.8);
  checkEntity(1,1,18.38,88.15,396.55);
  checkEntity(2,-1,15.41,187.55,228.61);
  checkEntity(3,-1,12.79,746.62,100.04);
  checkEntity(4,-1,25.76,304.25,84.9);
  checkEntity(10,-1,4.91,521.9,358.11);
  checkEntity(9,-1,-1.0,321.34,119.16);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,216.64,50.5);
  checkEntity(1,1,18.38,81.67,399.79);
  checkEntity(2,-1,15.41,186.87,228.78);
  checkEntity(3,-1,12.79,744.55,100.99);
  checkEntity(4,-1,25.76,289.92,75.33);
  checkEntity(10,-1,4.91,724.35,268.19);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.69,206.08,53.2);
  checkEntity(1,1,17.76,88.22,397.19);
  checkEntity(2,-1,15.41,186.2,228.94);
  checkEntity(3,-1,12.79,742.48,101.93);
  checkEntity(4,-1,25.76,275.6,65.76);
  checkEntity(10,-1,4.91,663.37,178.27);
  checkEntity(11,-1,4.75,128.78,489.95);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,195.52,55.91);
  checkEntity(1,1,17.76,94.78,394.6);
  checkEntity(2,-1,15.41,185.52,229.11);
  checkEntity(3,-1,12.79,740.41,102.87);
  checkEntity(4,-1,25.76,261.27,56.19);
  checkEntity(10,-1,4.91,460.91,88.34);
  checkEntity(11,-1,4.75,317.86,445.71);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,184.97,58.61);
  checkEntity(1,1,17.76,101.34,392.01);
  checkEntity(2,-1,15.41,184.85,229.28);
  checkEntity(3,-1,12.79,738.34,103.81);
  checkEntity(4,-1,25.76,246.94,46.62);
  checkEntity(10,-1,4.91,258.46,11.41);
  checkEntity(11,-1,4.75,506.93,360.86);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,174.41,61.31);
  checkEntity(1,1,17.76,107.9,389.42);
  checkEntity(2,-1,15.41,184.17,229.45);
  checkEntity(3,-1,12.79,736.27,104.75);
  checkEntity(4,-1,26.23,226.42,39.31);
  checkEntity(11,-1,4.75,696.01,276.01);
  checkEntity(10,-1,-1.0,248.98,15.62);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,400.0,257.5);
  simulation.move();
  checkEntity(0,0,21.69,163.85,64.01);
  checkEntity(1,1,17.16,127.47,380.94);
  checkEntity(2,-1,15.41,183.5,229.61);
  checkEntity(3,-1,12.79,734.21,105.7);
  checkEntity(4,-1,26.23,205.49,33.23);
  checkEntity(11,-1,4.75,705.42,191.16);
  checkEntity(12,-1,4.59,88.45,474.31);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(0,0,21.69,153.3,66.72);
  checkEntity(1,1,17.16,147.05,372.47);
  checkEntity(2,-1,15.41,182.82,229.78);
  checkEntity(3,-1,12.79,732.14,106.64);
  checkEntity(4,-1,26.23,184.56,27.16);
  checkEntity(11,-1,4.75,516.35,106.31);
  checkEntity(12,-1,4.59,264.17,466.79);
  applyOrder(0,0,"WAIT");
  applyOrder(1,0,"WAIT");
  simulation.move();
  checkEntity(1,1,17.16,166.63,364.0);
  checkEntity(2,-1,15.41,182.15,229.95);
  checkEntity(3,-1,12.79,730.07,107.58);
  checkEntity(4,-1,34.03,155.14,46.83);
  checkEntity(11,-1,4.75,327.27,21.46);
  checkEntity(12,-1,4.59,439.89,387.07);
  checkEntity(0,0,-1.0,148.5,67.95);
}

  private void applyOrder(int owner, int id, double targetx, double targety) {
    // TODO Auto-generated method stub
    
  }

  private void applyOrder(int owner, int id, String string) {
    
  }

  private void readEntity(int id, int owner, double d, double e, double f) {
    Entity entity = new Entity(owner);
    entity.update(e,f, d, 0, 0);
    state.allChips.add(entity);
  }

  private void checkEntity(int id, int owner, double radius, double x, double y) {
    Entity entity = state.allChips.elements[id];
    assertThat(entity.owner, is(owner));
    assertThat(entity.radius, is (radius));
    assertThat(entity.x, is(x));
    assertThat(entity.y, is(y));
  }
}
