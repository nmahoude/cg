package pokerChipRace.tests;

import pokerChipRace.GameState;
import pokerChipRace.entities.Entity;
import pokerChipRace.simulate.Simulation;

public class Controller {
  GameState state;
  Simulation simulation;
  
  public static void main(String[] args) {
    Controller controller = new Controller();
    controller.setup();
    controller.addEntities();
    
    controller.play();
  }
  

  private void play() {
    for (int i=0;i<1_000_000;i++) {
      simulation.playTurn();
    }
  }


  public void setup() {
    state = new GameState();
    simulation = new Simulation();
    simulation.setGameState(state);
  }


  public void addEntities() {
    readEntity(0,0,724.6743774414062, 376.09814453125, 0.0, 0.0,22.0);
    readEntity(1,0,291.6842041015625, 34.03342819213867, 0.0, 0.0,22.0);
    readEntity(2,0,430.6830139160156, 203.0612030029297, 0.0, 0.0,22.0);
    readEntity(3,1,680.3815307617188, 107.48697662353516, 0.0, 0.0,22.0);
    readEntity(4,1,755.4916381835938, 54.16474151611328, 0.0, 0.0,22.0);
    readEntity(5,1,516.9147338867188, 38.160484313964844, 0.0, 0.0,22.0);
    readEntity(6,-1,520.43212890625, 349.64288330078125, -3.9320950508117676, 5.080718040466309,19.408491134643555);
    readEntity(7,-1,190.05186462402344, 359.1792297363281, 3.7283389568328857, 4.852934837341309,15.908758163452148);
    readEntity(8,-1,253.4017333984375, 259.5242614746094, -1.020956039428711, 0.7239260077476501,11.26508903503418);
    readEntity(9,-1,291.30126953125, 200.0384063720703, -0.3791249990463257, 0.27903100848197937,13.772111892700195);
    readEntity(10,-1,511.5721130371094, 411.3345031738281, -5.510680198669434, 0.07664299756288528,11.779850959777832);
    readEntity(11,-1,245.54330444335938, 320.5696716308594, -3.085602045059204, 6.795526027679443,10.763887405395508);
    readEntity(12,-1,431.9039001464844, 478.63494873046875, 1.8313299417495728, 0.26665300130844116,18.204633712768555);
    readEntity(13,-1,590.2728881835938, 134.08236694335938, -0.0, 0.0,24.026538848876953);
    readEntity(14,-1,217.47325134277344, 215.81057739257812, -3.724220037460327, 8.327756881713867,21.360769271850586);
    readEntity(15,-1,143.4920196533203, 140.57420349121094, 1.8888100385665894, 4.532544136047363,21.254865646362305);
    readEntity(16,-1,638.1077880859375, 486.717529296875, 6.155233860015869, 3.239159107208252,18.16677474975586);
    readEntity(17,-1,324.4772033691406, 282.5975341796875, 8.173571586608887, 4.373716831207275,20.290061950683594);
    readEntity(18,-1,163.6325225830078, 444.612548828125, -0.0, 0.0,22.375057220458984);
    readEntity(19,-1,473.51214599609375, 286.6481018066406, -6.552276134490967, 1.2054059505462646,19.44071388244629);
    readEntity(20,-1,619.7417602539062, 347.20703125, 0.5038049817085266, 0.7231760025024414,13.29581356048584);
    readEntity(21,-1,581.9083251953125, 232.45050048828125, 0.009050999768078327, 0.004116999916732311,19.806461334228516);
    readEntity(22,-1,137.456298828125, 261.2780456542969, 0.0, 0.0,23.370384216308594);
    readEntity(23,-1,142.22511291503906, 327.72918701171875, -0.036733001470565796, 0.19487999379634857,21.993730545043945);
    readEntity(24,-1,233.3192901611328, 460.0710754394531, 0.0, 0.0,23.839866638183594);
    readEntity(25,-1,541.2835083007812, 199.6179962158203, -2.8856029510498047, 2.2919890880584717,11.058307647705078);
    readEntity(26,-1,385.00250244140625, 314.97906494140625, 0.2372490018606186, 1.6791939735412598,21.719343185424805);
    readEntity(27,-1,60.0308952331543, 214.78842163085938, -4.32896089553833, 4.047883987426758,10.206849098205566);
    readEntity(28,-1,208.4039306640625, 70.7476806640625, -1.4596879482269287, 2.3263819217681885,16.901697158813477);
    readEntity(29,-1,430.9140319824219, 95.58061981201172, -0.0, 0.0,24.834226608276367);
    readEntity(30,-1,750.0421752929688, 502.4300231933594, 9.40437126159668, 3.236840009689331,12.201292991638184);
    readEntity(31,-1,315.95660400390625, 143.6000213623047, -5.550239086151123, 1.1023550033569336,14.300597190856934);
    readEntity(32,-1,60.17445755004883, 448.6737060546875, 3.433505058288574, 0.17326100170612335,17.429105758666992);
    readEntity(33,-1,266.4576416015625, 387.626220703125, -0.4360179901123047, 0.705407977104187,19.475522994995117);
    readEntity(34,-1,98.0516128540039, 195.06573486328125, -3.402240037918091, 2.2276580333709717,20.144573211669922);
    readEntity(35,-1,728.819580078125, 266.670166015625, -0.0, 0.0,22.64336585998535);
    readEntity(36,-1,371.4612731933594, 116.20501708984375, 4.214001178741455, 4.972672939300537,10.165745735168457);
    applyOrder(0, 0, "WAIT");
    applyOrder(0, 1, "WAIT");
    applyOrder(0, 2, "WAIT");
    applyOrder(1, 3, "WAIT");
    applyOrder(1, 4, "WAIT");
    applyOrder(1, 5, "WAIT");
  }
  
  private void readEntity(int id, int owner, double x, double y, double vx, double vy, double radius) {
    Entity entity = state.getInitialChip(id);
    entity.update(owner, x,y, radius, vx, vy);
  }
  private void applyOrder(int owner, int id, String wait) {
    for (int i=0;i<state.entityFE;i++ ) {
      Entity entity = state.getInitialChip(i);
      if (entity.owner == owner && entity.id == id) {
        entity.targetx = -100;
        entity.targety = -100;
      }
    }
  }

}
