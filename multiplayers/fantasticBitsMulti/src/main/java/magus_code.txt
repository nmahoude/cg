
const int DURATIONS_COUNT = 1;
double durations[DURATIONS_COUNT];
high_resolution_clock::time_point starts[DURATIONS_COUNT];

    #define PS(i)   starts[i] = NOW;
    #define PE(i)   durations[i] = durations[i] + duration_cast<duration<double>>(NOW - starts[i]).count();
#else
    #define PS(i)
    #define PE(i)
#endif

high_resolution_clock::time_point start;
#define NOW high_resolution_clock::now()
#define TIME duration_cast<duration<double>>(NOW - start).count()

// ***********************************************************
constexpr double INF = 16000*16000 + 7500*7500;


constexpr int SPELL_DEPTH = 8;
constexpr int POOL = 50;
constexpr double MUTATION = 2;

// ***********************************************************








bool doLog = false;

// ***********************************************************

  void simulate2(Solution* solution) {
    doLog = true;

    cerr << "Solution: " << endl;
    for (int i = 0; i < DEPTH; ++i) {
      cerr << ANGLES[solution->moves1[i]] << " " << ANGLES[solution->moves2[i]] << endl;
    }
    cerr << "Spell 1: " << solution->spellTurn1 << " " << solution->spell1 << " " << solution->spellTarget1->id << endl;
    cerr << "Spell 2: " << solution->spellTurn2 << " " << solution->spell2 << " " << solution->spellTarget2->id << endl;

    energy = 0;
    depth = 0;

    myWizard1->apply(solution, 0, 1);
    myWizard2->apply(solution, 0, 2);
    dummies();

    play();

    cerr << "******* State at turn " << depth + 1 << endl;
    for (int i = 0; i < unitsFE; ++i) {
      units[i]->print();
    }
    depth = 1;

    solution->energy = eval() * 0.1;

    for (int i = 1; i < DEPTH; ++i) {
      myWizard1->apply(solution, i, 1);
      myWizard2->apply(solution, i, 2);
      dummies();

      play();

      cerr << "******* State at turn " << depth + 1 << endl;
      for (int i = 0; i < unitsFE; ++i) {
        units[i]->print();
      }
      depth += 1;
    }

    solution->energy += energy + eval();

    cerr << "Sanity check : " << solution->energy << endl;
    cerr << "Mana: " << mana << endl;
    cerr << "My score: " << myScore << endl;
    cerr << "His score: " << hisScore << endl;

    reset();

    doLog = false;
  }

// ****************************************************************************************


